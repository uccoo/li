<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[实验诊断学CBL实验教程]]></title>
    <url>%2F2019%2F07%2F03%2FCBL_book%2F</url>
    <content type="text"><![CDATA[1血液学一般检查 图1 贫血骨髓象 图2 骨髓象2 2感染的实验诊断 二级目录1 二级目录2 3血液病的实验诊断 4血栓性疾病的实验诊断 5体液检测 6免疫与生化检测]]></content>
      <categories>
        <category>教育教学</category>
      </categories>
      <tags>
        <tag>实验诊断学</tag>
        <tag>CBL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu首次登陆设置root密码]]></title>
    <url>%2F2019%2F05%2F16%2Fubuntu%E9%A6%96%E6%AC%A1%E7%99%BB%E9%99%86%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[给root用户设置密码 打开终端，输入命令sudo passwd，输入当前用户的密码，然后系统会提示输入新密码Enter new UNIX password:并再次确认Retype new UNIX password:，此时的密码就是root新密码。修改成功后，输入命令su root，再输入新的密码就ok了]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>root密码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生信技能树_生信服务器配置全攻略]]></title>
    <url>%2F2019%2F05%2F16%2F%E7%94%9F%E4%BF%A1%E6%8A%80%E8%83%BD%E6%A0%91_%E7%94%9F%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%85%A8%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[请点击这里看生信技能树的视频 1查看cpu信息 123456789101112131415161718192021222324252627282930313233yinli@pc-System-Product-Name:~$ cat /proc/cpuinfo |grep proprocessor : 0processor : 1processor : 2processor : 3processor : 4processor : 5processor : 6processor : 7processor : 8processor : 9processor : 10processor : 11processor : 12processor : 13processor : 14processor : 15processor : 16processor : 17processor : 18processor : 19processor : 20processor : 21processor : 22processor : 23processor : 24processor : 25processor : 26processor : 27processor : 28processor : 29processor : 30processor : 31 12yinli@pc-System-Product-Name:~$ cat /proc/cpuinfo |grep pro|wc 32 96 470 1234567891011121314151617181920212223242526272829303132333435yinli@pc-System-Product-Name:~$ df -hFilesystem Size Used Avail Use% Mounted onudev 32G 0 32G 0% /devtmpfs 6.3G 2.3M 6.3G 1% /run/dev/nvme0n1p2 228G 10G 207G 5% /tmpfs 32G 0 32G 0% /dev/shmtmpfs 5.0M 4.0K 5.0M 1% /run/locktmpfs 32G 0 32G 0% /sys/fs/cgroup/dev/loop0 13M 13M 0 100% /snap/gnome-characters/139/dev/loop2 2.3M 2.3M 0 100% /snap/gnome-calculator/260/dev/loop1 36M 36M 0 100% /snap/gtk-common-themes/1198/dev/loop4 152M 152M 0 100% /snap/gnome-3-28-1804/36/dev/loop3 141M 141M 0 100% /snap/gnome-3-26-1604/82/dev/loop5 141M 141M 0 100% /snap/gnome-3-26-1604/74/dev/loop6 3.8M 3.8M 0 100% /snap/gnome-system-monitor/57/dev/loop7 4.2M 4.2M 0 100% /snap/gnome-calculator/406/dev/loop8 1.0M 1.0M 0 100% /snap/gnome-logs/61/dev/loop9 90M 90M 0 100% /snap/core/6673/dev/loop10 15M 15M 0 100% /snap/gnome-logs/45/dev/nvme0n1p1 511M 6.1M 505M 2% /boot/efi/dev/loop11 35M 35M 0 100% /snap/gtk-common-themes/818/dev/loop12 91M 91M 0 100% /snap/core/6350/dev/loop13 15M 15M 0 100% /snap/gnome-characters/254/dev/loop14 54M 54M 0 100% /snap/core18/941/dev/loop15 3.8M 3.8M 0 100% /snap/gnome-system-monitor/77/dev/sda1 7.3T 5.3T 1.6T 78% /data/dev/sdb1 7.3T 93M 6.9T 1% /public/dev/sdd1 7.3T 570M 6.9T 1% /home/dev/sdc1 7.3T 96G 6.8T 2% /projecttmpfs 6.3G 16K 6.3G 1% /run/user/121tmpfs 6.3G 32K 6.3G 1% /run/user/1000/dev/loop16 90M 90M 0 100% /snap/core/6818/dev/loop17 15M 15M 0 100% /snap/gnome-characters/258/dev/loop18 3.8M 3.8M 0 100% /snap/gnome-system-monitor/81/dev/loop19 152M 152M 0 100% /snap/gnome-3-28-1804/40 2 创建账户 123456789101112131415161718192021(base) pc@pc-System-Product-Name:~$ sudo adduser yl[sudo] password for pc:Adding user `yl&apos; ...Adding new group `yl&apos; (1002) ...Adding new user `yl&apos; (1002) with group `yl&apos; ...Creating home directory `/home/yl&apos; ...Copying files from `/etc/skel&apos; ...Enter new UNIX password:Retype new UNIX password:passwd: password updated successfullyChanging the user information for ylEnter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []:Is the information correct? [Y/n] y(base) pc@pc-System-Product-Name:~$ su ylPassword:yl@pc-System-Product-Name:/home/pc$ 3 新账户权限设置 12(base) pc@pc-System-Product-Name:~$ sudo mkdir /data/bio(base) pc@pc-System-Product-Name:~$ sudo chmod 777 /data/bio 切换到刚才yl普通用户 123456789(base) pc@pc-System-Product-Name:~$ su ylPassword:yl@pc-System-Product-Name:/home/pc$ cd /data/bioyl@pc-System-Product-Name:/data/bio$ lsyl@pc-System-Product-Name:/data/bio$ touch tmpyl@pc-System-Product-Name:/data/bio$ ls -lhtotal 0-rw-rw-r-- 1 yl yl 0 5月 16 19:45 tmpyl@pc-System-Product-Name:/data/bio$ rm -rf tmp 4 为IP提供网页服务 1pc@pc-System-Product-Name:/data/bio$ sudo apt install nginx nginx可以给一个IP地址分配多个域名 1234(base) pc@pc-System-Product-Name:/data/bio$ cd /var/www/html/(base) pc@pc-System-Product-Name:/var/www/html$ lsindex.nginx-debian.html(base) pc@pc-System-Product-Name:/var/www/html$ sudo vim lab.html 写入’hello, world’ 1(base) pc@pc-System-Product-Name:/var/www/html$ cat /etc/apt/sources.list 5 安装R和Rstudio 安装后，浏览器输入 http://你的IP:8787/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>生信技能树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三阴性乳腺癌]]></title>
    <url>%2F2019%2F05%2F10%2F%E4%B8%89%E9%98%B4%E6%80%A7%E4%B9%B3%E8%85%BA%E7%99%8C%2F</url>
    <content type="text"><![CDATA[1 什么是三阴性乳腺癌 三阴性乳腺癌(Triple-negative breast cancer ,TNBC)。 其中，雌激素受体(estrogen receptor，ER), 孕激素受体(progesterone receptor，PR),HER2/neu基因不表达，均阴性。约占乳腺癌发病总数的15~20%左右。 2 三阴性乳腺癌病理特点 其病理学特点为组织学分级比较高、发病年龄比较早、肿瘤体积比较大、发生内脏转移和骨转移的概率比较大，术后1~3年是复发高峰，相比非三阴性乳腺癌死亡率更高，且中位生存期更短。 3 为什么三阴性乳腺癌难治疗 针对乳腺癌的治疗手段包括手术治疗、新辅助化疗、辅助化疗、内分泌治疗和靶向治疗。由于三阴性乳腺癌缺少ER、PR和HER2的表达，这意味着，内分泌治疗和针对Her-2的靶向治疗对这种癌症统统不管用。虽然三阴性乳腺癌对化疗比较敏感，但通过全身的常规辅助化疗，通常只有约20%患者有很好的化疗效果。目前许多研究证实，三阴性乳腺癌对新辅助化疗更加敏感，其病理完全缓解率更高。 三阴性乳腺癌被公认为最难治的乳腺癌， 三阴：亚型雌激素受体，孕激素受体，人表皮生长因子受体 ２(HER-2受体)三个治疗靶点均为阴性。 缺乏特定治疗靶点是三阴性乳腺癌缺乏很好治疗手段的主要原因。 因为大部分激素治疗靶向上述三种受体中的一种，因为其缺失，所以难以治疗。 4 三阴性乳腺癌患者生存率 乳腺癌患者中，大概15%-20%被诊断为三阴性，大多数患者是年轻女性或BRCA1基因突变的女性。通过汇总数据分析发现，通过最佳治疗，20年生存率非常接近激素阳性癌症。 5 三阴性乳腺癌存在异质性 通过对组学数据分析发现，三阴性乳腺癌不是传统认识中的单一类型。三阴性乳腺癌拥有自己的“家族”，不同亚型之间可能存在生存差异、对不同治疗方案敏感性不同。某些类型的三阴性乳腺癌更具攻击性，预后不良，而其他类型的乳腺癌与激素受体阳性乳腺癌的预后非常相似或更好。 7 哪些人容易得三阴性乳腺癌 35岁以下且有乳腺癌家族史的患者更易发生三阴性乳腺癌。 如果对&lt;35岁、有乳腺癌家族史的人群开展乳腺癌筛查，同时检查乳腺癌易感基因BRCA1表达状态，或许有利于三阴性乳腺癌的早发现、早诊断、早治疗，改善三阴性乳腺癌的临床预后。此外，40岁以上女性应每年进行年度筛查；45岁以上女性应定期做乳房X线检查；55岁以上女性1~2年做一次筛查。 几个疑问暂时先放这里，后续查资料解决 1.三个受体之间的关系 2.三阴性人群中和生存率显著相关的其他因素？比如基因？通路等。]]></content>
      <categories>
        <category>理论基础</category>
      </categories>
      <tags>
        <tag>三阴性乳腺癌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux压缩和解压常用命令]]></title>
    <url>%2F2019%2F05%2F07%2FLinux%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常见的压缩文件扩展名 12345.gz.bz2.tar.tar.gz.tar.bz2 gzip是应用最广泛的压缩命令。可以解开zip，gzip，compress软件压缩的文件。gzip压缩成的是.gz文件。当用gzip压缩时，原有文件不再存在。 cat可以读取纯文本文件，zcat可以读取纯文本文件被压缩后的压缩文件。 bzip2比gzip有更好的压缩比，用法与gzip几乎相同。 上面这些仅能对单一文件进行压缩，虽然gzip与bzip2也可以对目录进行压缩，但是是对目录内的所有文件分别进行压缩，不想windows下的winRAR将好多数据包成一个文件的样式。liux要完成这种打包命令，需要tar命令。它可以将多个目录或文件打包成一个大文件，同时可以通过gzip和bzip2的支持，将该文件同时进行压缩。因为它的使用 1 gzip 用法 12gzip [-cdtv#] 文件名zcat 文件名.gz 参数 1234-c 压缩的数据输出到屏幕上-d 解压缩的参数-v显示源文件/压缩文件的压缩比-#压缩等级，-1最快但压缩比最差，-9最慢，压缩比最好。默认-6 ，建议用这个 实例 1234gzip hero.avi#压缩这个视频gzip -d hero.avi.gz#解压这个视频gzip -c hero.avi &gt; hero.avi.gz#压缩后，保留源文件，用-c选项zcat man.config.gz#man.config.gz是纯文本文件，可以zcat查看 实际情况中，更多的不是对一个文件进行压缩，而是多个文件和文件夹一起打包压缩，tar就是来打包的，所以tar和gzip经常联用。 有些同学可能会问，“打包/拆包”“压缩/解压缩”有什么区别？我们用一个生活中的例子来解释，相信大家会豁然开朗： 就像搬家时，我们把每一床棉被都抽成真空，这叫作压缩，然后把好几床抽真空的棉被用绳子捆绑起来，这就叫打包。 东西搬到新家后，把绳子解开，就是拆包，然后把每床棉被舒展开，让棉被松软起来，这就是解压缩。 如果不抽真空，只是把几床棉被简单地用绳子捆起来，那么就单独用tar就好了。 如果只有一床棉被，打算抽真空，那么就用gzip就好了。 如果有好多床棉被，既要抽真空，又要捆起来，那么就要将tar和gzip结合起来使用。 实际应用中，拆包解压比压缩打包次数多的多。最常用的命令和参数是 1tar -xzvf 文件名.tar.gz #解压拆包命令 解释如下 -x 拆包或解压缩 -z 通过gzip的支持进行压缩/解压缩，文件名后缀最好是tar.gz -j 通过bzip2的支持进行压缩/解压缩，文件名后缀最好是tar.bz2 -v 压缩/解压缩过程中，正在处理的文件名显示出来 -f filename 后面接被处理的文件名 -c 新建打包文件，可以搭配-v -t 查看打包文件的内容有哪些文件名，重点在看文件名 注意，-x和-c不可同时出现 总之，牢记下面几个 1234567#压缩tar -cjv -f 要被压缩的文件或目录#解压缩tar -xzv -f 要解压的文件gziptar -xjv -f 要解压的文件bz2#查询tar -tjv -f 2 bzip2 bzcat 与gzip用法几乎相同 1bzip2 [-cdkzv#]文件 -c 压缩的数据输出到屏幕上 -d 解压缩的参数 -k保留原文件，不会删除原始文件 -v显示源文件/压缩文件的压缩比 -#压缩等级，-1最快但压缩比最差，-9最慢，压缩比最好。默认-6 ，建议用这个]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>压缩</tag>
        <tag>j解压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2019%2F05%2F07%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1基础命令: cd -, cd … , history, !5 , /home/ , /tmp/ , &gt;,&amp;，jobs,nohup 1,2,0 1 cd(change directory) cd …返回上一级目录 cd …/…返回上两级目录 cd 进入家目录 cd ~进入家目录(目前用户身份所在的主文件夹)等同于cd cd ~account 进到account这个用户的主文件夹(/home/account) cd -返回上次目录 2 history history 显示历史目录 2文件和目录操作： ls,cd,pwd,mkdir,rm,mv,cp 1 ls() 最常用ls -al ls有很多参数，常用的有以下 -a 显示全部文件，包括隐藏文件（开头为.）一起显示 -d 仅列出目录本身，而不是列出目录内的文件数据 -f 直接列出结果，不进行排序（ls默认以文件名排序） -l 列出长数据串，包含文件的属性与权限 -r 排序结果反向输出 -S 以文件容量大小排序（而不是以文件名排序） -t 以时间排序，而不是文件名排序 –full-time 以完整时间模式输出，可以呈现文件的修改时间 color=auto 系统自行根据设置判断是否给予颜色 2 pwd(print working directory) 显示当前目录 3 mkdir(make directory) 创建新目录 mkdir -p 递归创建，自行创建多层目录 mkdir -p test1/test2/test3如果没有test1，那么就会自行创建 4 rm和rmdir(remove directory) 删除目录 rmdir -p 连同上层的空目录一起删除（rmdir仅能删除空的目录） 若要删除所有目录下的所有东西用rm命令 rm - r 5 复制、移动、删除：cp，rm，mv 1 复制cp(copy) cp 源文件 目标文件 常用的参数有 -a 复制的文件属性完全一样 -i 若目标文件已经存在，会询问是否覆盖 -r 递归持续复制，用于目录的复制行为 2 删除rm(remove) rm [-fir] -f force的意思，强制删除 -i 询问是否删除 -r 递归删除 3 移动或改名mv(move) mv [-fiu] 源文件 目标文件 -f 强制覆盖，若目标文件已经有，不会询问 -i 若目标文件存在，会询问 -u 若目标文件存在，且源文件比较新，才会更新update 3文件内容查阅touch,head,tail,less,more，cat cat 第一行开始显示文件内容 tac 最好一行开始显示，是cat的倒写 more 一页一页显示文件内容 less和more类似，但它可以往前翻页 head 只看头几行 tail只看后几行 1 touch 创建或修改文件 touch 文件 2 cat(concatenate)：一口气输出到屏幕 cat -n 最常用 打印出行号，空白行也有行号 cat -b 列出行号，但仅针对非空白行，空白行不标，注意与-n的区别 这个命令单独用比较少，当文件行数超过40，来不及在屏幕看到结果，所以更常用的是more和less 3 more一页一页翻 more hg38.tss 123456789101112131415161718192021222324252627282930NR_046018 chr1 9874 13874 0NR_024540 chr1 27370 31370 1NR_104148 chr7 64664083 64668083 0NR_111960 chrX 44871175 44875175 0NR_028458 chr14 92104621 92108621 1NR_028459 chr14 92104621 92108621 1NR_026818 chr1 34081 38081 1NR_026820 chr1 34081 38081 1NR_026822 chr1 34081 38081 1NM_001005484 chr1 67091 71091 0NR_039983 chr1 138566 142566 1NR_103753 chr5 102669464 102673464 1NR_104160 chr10 32345218 32349218 1NR_026823 chr1 204597 208597 1NM_001005221 chr1 449678 453678 1NM_001005224 chr1 449678 453678 1NM_001005277 chr1 449678 453678 1NR_028322 chr1 493445 497445 1NR_028325 chr1 493445 497445 1NR_125957 chr1 627009 631009 1NM_001005221-HOMER2 chr1 684654 688654 1NM_001005224-HOMER2 chr1 684654 688654 1NM_001005277-HOMER2 chr1 684654 688654 1NR_028327 chr1 728351 732351 1NR_033908 chr1 776688 780688 1NR_103536 chr1 815371 819371 0NR_047526 chr1 825591 829591 0NR_047519 chr1 825591 829591 0NR_047521 chr1 825591 829591 0--More--(0%) 重点在最好一行，光标在这里等待命令,可以执行以下 空格键：向下翻一页 enter：向下滚动一行 /字符串：在显示的内容中，向下查询‘字符串’这个关键字 q：离开more，不再显示该文件内容 4 less一页一页翻 less比more更好，可以前后翻，也可以前后查询 空格键：向下翻一页 pagedown：向下翻一页 pageup：向上翻一页 /字符串：向下查询‘字符串’ ？字符串：向上查询‘字符串’ q：离开less 各个参数如下 -N显示每行行号 -s显示连续空行为一行 -S行过长将超出部分舍弃 -f强迫打开特殊文件 5 head和tail 以行为单位进行数据选取 head [-n number] 文件 默认10行 注意，number可以是负数，比如 head -n -100 文件 假若文件有141行，那么上面这个就是显示前面41行，后面100行不显示 取11到20行呢 先取前20行，再取后10行 head -n 20 文件|tail -n 10, 3系统管理： df,du,top,free,ps,ipconfig,netstat,ssh,scp, 1 df 列出文件系统的整体磁盘使用量 df [-ahikHTm] 目录或文件名，默认以KB列出 -h 较易阅读的GB,MB,KB格式显示 -i 不用硬盘容量，而已inode的数量显示 2 du du [-ahskm]文件名或目录名 -s 列出总量，不列出每个各别的目录占用容量 -h 以人们容易读的容量格式显示(G) du -sh常用 top 4用户权限： chown,chgrp,groups,ls 5文本操作： awk,grep,sed,paste,cat,diff,wc,vi 5.1 wc wc命令计算文件的行数，字数和字节数 用法 1wc [-clw] 文件 -c 只显示bytes数 -l 只显示行数 -w 只显示字数 12$ wc testfile # testfile文件的统计信息 3 92 598 testfile # testfile文件的行数为3、单词数92、字节数598 5.2 diff diff命令用了比较两个文件的差异 1234diff me.txt me_copy.txt -yThis is the first post. | This is the first first post.This is the second line. | This is the second second line.This is the third line. | This is the third third line.. diff的参数很多，具体参考Linux diff命令,常用-y 结果解释 &quot;|&quot;表示前后2个文件内容有不同 &quot;&lt;&quot;表示后面文件比前面文件少了1行内容 &quot;&gt;&quot;表示后面文件比前面文件多了1行内容 5.3 paste命令 paste命令用于合并文件的列，把文件内容列列合并。简单就是列追加，类似R中的cbind命令 1paste [-s] [-d&lt;间隔字符&gt;][文件1][文件2][文件...] 1234$ cat p1123 12345$ cat p2abcd 1234$ cat p3IIIIII 12345$ paste p1 p2 p31 a I2 b II3 c III d 12345$ paste -d &apos;%^&amp;&apos; p1 p2 p31%a^I2%b^II3%c^III%d^ 看下-s参数 1234$ paste -s p1 p2 p31 2 3a b c dI II III 相当于excel里的“转置粘贴” 5.4 sort命令 sort是用来对数据进行排序的命令，用法为 1sort [-bcfMnrtk][源文件][-o 输出文件] 注意，sort可以对文本文件以行为单位进行排序。 sort的参数比较多，但常用的为一下几个 -n -k -t -r 举例如下 5.4.1-n的用法 123456789$ sort t1113142456 123456789$ sort -n t1124561314 -n的作用很清楚了，可以使得number不是以字符排序，而是以数字排序。 123456789$ sort -nr t1141365421 -r(reverse)反向排序 5.4.2-kt的用法 对按字段分隔的数据非常有用 -t指定字段分隔符（sep） -k指定排序的字段（key） 12345$ cat t2banana:30:5.5apple:10:2.5pear:90:2.3orange:20:3.4 12345$ sort -t &apos;:&apos; -k 2 t2apple:10:2.5orange:20:3.4banana:30:5.5pear:90:2.3 上例中，以’：'进行分隔，按第2个字段进行排序。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用快捷键]]></title>
    <url>%2F2019%2F05%2F04%2FLinux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[快捷键 作用 描述 Tab 自动补全 ↑ 显示上一条命令 – ↓ 显示下一条命令 – Ctrl + A 移动光标到行首 – Ctrl + E 移动光标到行末 – Ctrl + C 终止当前任务 – Ctrl+R 历史命令中查找 非常好用 Ctrl+U 删除光标之前的内容 Ctrl+K 删除光标之后到行末的内容 Ctrl+D 删除光标后一个字符 光标后 Ctrl+H 删除光标前一个字符 光标前 Ctrl+Y 粘贴刚才上三项删除的字符 CTRL + W 从光标处删除至字首 – Shift + Insert 向终端内粘贴文本 – ALT + F 按单词前移（右向） – ALT + B 按单词后移（左向） – ALT + Backspace 删除前一个单词 – 鼠标左选中即复制 鼠标右直接粘贴 Shift+Ctrl+C 复制 Shift+Ctrl+V 粘贴 –]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生信技能树R作业答案-高级]]></title>
    <url>%2F2019%2F05%2F01%2F%E7%94%9F%E4%BF%A1%E6%8A%80%E8%83%BD%E6%A0%91R%E4%BD%9C%E4%B8%9A%E7%AD%94%E6%A1%88-%E9%AB%98%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[为达到更好的浏览效果，可转至RPubs进行查看 1 安装一些R包 数据包： ALL, CLL, pasilla, airway 软件包：limma，DESeq2，clusterProfiler 工具包：reshape2 绘图包：ggplot2 12345678910rm(list = ls())if(F)&#123; source("http://bioconductor.org/biocLite.R") options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")) options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")#修改镜像，安装会加速 BiocManager::install("clusterProfiler") BiocManager::install("ComplexHeatmap") BiocManager::install("maftools") BiocManager::install("reshape2")&#125; 2了解ExpressionSet对象. 比如CLL包里面就有data(sCLLex) 找到它包含的元素，提取其表达矩阵(使用exprs函数)，查看其大小 A.参考：http://www.bio-info-trainee.com/bioconductor_China/software/limma.html B.参考：https://github.com/bioconductor-china/basic/blob/master/ExpressionSet.md 1234library(CLL)data("sCLLex")View(sCLLex)#查看其包含的元素sCLLex#查看包含的元素 ## ExpressionSet (storageMode: lockedEnvironment) ## assayData: 12625 features, 22 samples ## element names: exprs ## protocolData: none ## phenoData ## sampleNames: CLL11.CEL CLL12.CEL ... CLL9.CEL (22 total) ## varLabels: SampleID Disease ## varMetadata: labelDescription ## featureData: none ## experimentData: use 'experimentData(object)' ## Annotation: hgu95av2 12exp &lt;- exprs(sCLLex)#提取表达矩阵dim(exp)#查看其大小 ## [1] 12625 22 12group &lt;- pData(sCLLex)#提取分组信息table(group)#设计矩阵 ## Disease ## SampleID progres. stable ## CLL11 1 0 ## CLL12 0 1 ## CLL13 1 0 ## CLL14 1 0 ## CLL15 1 0 ## CLL16 1 0 ## CLL17 0 1 ## CLL18 0 1 ## CLL19 1 0 ## CLL2 0 1 ## CLL20 0 1 ## CLL21 1 0 ## CLL22 0 1 ## CLL23 1 0 ## CLL24 0 1 ## CLL3 1 0 ## CLL4 1 0 ## CLL5 1 0 ## CLL6 1 0 ## CLL7 1 0 ## CLL8 1 0 ## CLL9 0 1 3了解 str,head,help函数 作用于 第二步提取到的表达矩阵 1str(exp) ## num [1:12625, 1:22] 5.74 2.29 3.31 1.09 7.54 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:12625] &quot;1000_at&quot; &quot;1001_at&quot; &quot;1002_f_at&quot; &quot;1003_s_at&quot; ... ## ..$ : chr [1:22] &quot;CLL11.CEL&quot; &quot;CLL12.CEL&quot; &quot;CLL13.CEL&quot; &quot;CLL14.CEL&quot; ... 1head(exp) ## CLL11.CEL CLL12.CEL CLL13.CEL CLL14.CEL CLL15.CEL CLL16.CEL ## 1000_at 5.743132 6.219412 5.523328 5.340477 5.229904 4.920686 ## 1001_at 2.285143 2.291229 2.287986 2.295313 2.662170 2.278040 ## 1002_f_at 3.309294 3.318466 3.354423 3.327130 3.365113 3.568353 ## 1003_s_at 1.085264 1.117288 1.084010 1.103217 1.074243 1.073097 ## 1004_at 7.544884 7.671801 7.474025 7.152482 6.902932 7.368660 ## 1005_at 5.083793 7.610593 7.631311 6.518594 5.059087 4.855161 ## CLL17.CEL CLL18.CEL CLL19.CEL CLL20.CEL CLL21.CEL CLL22.CEL ## 1000_at 5.325348 4.826131 5.212387 5.285830 5.581859 6.251678 ## 1001_at 2.350796 2.325163 2.432635 2.256547 2.348389 2.263849 ## 1002_f_at 3.502440 3.394410 3.617099 3.279726 3.391734 3.306811 ## 1003_s_at 1.091264 1.076470 1.132558 1.096870 1.138386 1.061184 ## 1004_at 6.456285 6.824862 7.304803 8.757756 6.695295 7.372185 ## 1005_at 5.176975 4.874563 4.097580 9.250585 7.657463 7.683677 ## CLL23.CEL CLL24.CEL CLL2.CEL CLL3.CEL CLL4.CEL CLL5.CEL CLL6.CEL ## 1000_at 5.480752 5.216033 5.966942 5.397508 5.281720 5.414718 5.460626 ## 1001_at 2.264434 2.344079 2.350073 2.406846 2.341961 2.372928 2.356978 ## 1002_f_at 3.341444 3.798335 3.427736 3.453564 3.412944 3.411922 3.396466 ## 1003_s_at 1.046188 1.082169 1.501367 1.191339 1.139510 1.153548 1.135671 ## 1004_at 7.616749 6.839187 7.545673 8.802729 7.307752 7.491507 8.063202 ## 1005_at 8.700667 5.546996 9.611601 5.732182 6.483191 6.072558 9.919125 ## CLL7.CEL CLL8.CEL CLL9.CEL ## 1000_at 5.897821 5.253883 5.214155 ## 1001_at 2.222276 2.254772 2.358544 ## 1002_f_at 3.247276 3.255148 3.365746 ## 1003_s_at 1.074631 1.166247 1.151184 ## 1004_at 7.014543 8.019108 7.432331 ## 1005_at 5.149411 4.989604 5.339848 1help(exp) ## starting httpd help server ... done 4安装并了解 hgu95av2.db 包. 看看 ls(“package:hgu95av2.db”) 后 显示的那些变量 12library(hgu95av2.db)ls("package:hgu95av2.db") ## [1] &quot;hgu95av2&quot; &quot;hgu95av2.db&quot; ## [3] &quot;hgu95av2_dbconn&quot; &quot;hgu95av2_dbfile&quot; ## [5] &quot;hgu95av2_dbInfo&quot; &quot;hgu95av2_dbschema&quot; ## [7] &quot;hgu95av2ACCNUM&quot; &quot;hgu95av2ALIAS2PROBE&quot; ## [9] &quot;hgu95av2CHR&quot; &quot;hgu95av2CHRLENGTHS&quot; ## [11] &quot;hgu95av2CHRLOC&quot; &quot;hgu95av2CHRLOCEND&quot; ## [13] &quot;hgu95av2ENSEMBL&quot; &quot;hgu95av2ENSEMBL2PROBE&quot; ## [15] &quot;hgu95av2ENTREZID&quot; &quot;hgu95av2ENZYME&quot; ## [17] &quot;hgu95av2ENZYME2PROBE&quot; &quot;hgu95av2GENENAME&quot; ## [19] &quot;hgu95av2GO&quot; &quot;hgu95av2GO2ALLPROBES&quot; ## [21] &quot;hgu95av2GO2PROBE&quot; &quot;hgu95av2MAP&quot; ## [23] &quot;hgu95av2MAPCOUNTS&quot; &quot;hgu95av2OMIM&quot; ## [25] &quot;hgu95av2ORGANISM&quot; &quot;hgu95av2ORGPKG&quot; ## [27] &quot;hgu95av2PATH&quot; &quot;hgu95av2PATH2PROBE&quot; ## [29] &quot;hgu95av2PFAM&quot; &quot;hgu95av2PMID&quot; ## [31] &quot;hgu95av2PMID2PROBE&quot; &quot;hgu95av2PROSITE&quot; ## [33] &quot;hgu95av2REFSEQ&quot; &quot;hgu95av2SYMBOL&quot; ## [35] &quot;hgu95av2UNIGENE&quot; &quot;hgu95av2UNIPROT&quot; 1ls(hgu95av2.db) ## [1] &quot;conn&quot; &quot;packageName&quot; 5利用注释包找到某基因对应的探针 理解 head(toTable(hgu95av2SYMBOL)) 的用法，找到 TP53 基因对应的探针ID 1head(toTable(hgu95av2SYMBOL)) ## probe_id symbol ## 1 1000_at MAPK3 ## 2 1001_at TIE1 ## 3 1002_f_at CYP2C19 ## 4 1003_s_at CXCR5 ## 5 1004_at CXCR5 ## 6 1005_at DUSP1 1ids &lt;- toTable(hgu95av2SYMBOL) 5.1 subset函数 1a1 &lt;- subset(ids, ids$symbol=='TP53') 5.2 grep函数 1a4 &lt;- ids[grep("^TP53$", ids$symbol),] 5.3 filter函数(依赖dplyr包) 1a5 &lt;- filter(ids, ids$symbol=='TP53') 6理解基于与探针的对应关系 总共多少个基因，基因最多对应多少个探针， 是哪些基因，是不是因为这些基因很长，所以在其上面设计多个探针呢？总共多少gene 1length(unique(ids$symbol)) ## [1] 8585 对应探针多的是那些gene 12ids_fre &lt;- data.frame(table(ids$symbol))tail(ids_fre[order(ids_fre$Freq),]) ## Var1 Freq ## 8365 YME1L1 7 ## 2809 GAPDH 8 ## 3638 INPP4A 8 ## 4720 MYB 8 ## 6010 PTGER3 8 ## 7339 STAT1 8 或者用sort命令 1tail(sort(table(ids$symbol))) ## ## YME1L1 GAPDH INPP4A MYB PTGER3 STAT1 ## 7 8 8 8 8 8 不管是Agilent芯片，还是Affymetrix芯片，上面设计的探针都非常短。 最长的如Agilent芯片上的探针，往往都是60bp，但是往往一个基因的长 度都好几Kb。因此一般多个探针对应一个基因，取最大表达值探针来作为 基因的表达量。 # 7.找到芯片有而hgu95av2.db中没有对应基因名的探针 第二步提取到的表达矩阵是12625个探针在22个样本的表达量矩阵， 找到那些不在 hgu95av2.db 包收录的对应着SYMBOL的探针。 提示：有1165个探针是没有对应基因名字的。 ## 第一种方法：match函数 7找到芯片有而注释包没有symbole的探针 第二步提取到的表达矩阵是12625个探针在22个样本的表达量矩阵，找到那些不在 hgu95av2.db 包收录的对应着SYMBOL的探针 1dim(exp) ## [1] 12625 22 1dim(hgu95av2SYMBOL) ## [1] 11460 2 12b1 &lt;- exp[-match(ids$probe_id, rownames(exp)),]dim(b1) ## [1] 1165 22 第二种方法:%in%函数 12b2 &lt;- exp[!(rownames(exp) %in% ids$probe_id),]b1==b2 8删除注释包没有symbol的探针 删除注释包中没有对应基因名的探针 过滤表达矩阵，删除那1165个没有对应基因名字的探针。 12exp_filter_no_symbol &lt;- as.data.frame(exp[match(ids$probe_id, rownames(exp)),])exp_filter_no_symbol2 &lt;- as.data.frame(exp[rownames(exp) %in% ids$probe_id,]) 9多个探针保留一个 多个探针对应一个基因的情况下，只保留在所有样本里面平均表达量最大的那个探针。 提示，理解 tapply,by,aggregate,split 函数 , 首先对每个基因找到最大表达量的探针。 然后根据得到探针去过滤原始表达矩阵 这种方法能够一定程度上增加差异基因的数目，但也容易造成假阳性的结果 https://blog.csdn.net/tommyhechina/article/details/80468361 合并探针，先看有无NA值，若有，可以删除或填充 先检查有无，若返回值&gt;0,说明有NA值。 1length(which(is.na(exp_filter_no_symbol))) ## [1] 0 结果是0，说明没有NA值。如果有则用impute包来进行填充 exp_symbol&lt;- impute.knn(exp_symbol)$data 下面开始进行合并，用aggregate命令 12345ids &lt;- toTable(hgu95av2SYMBOL)ids$median &lt;- apply(exp_filter_no_symbol, 1, median)ids &lt;- ids[order(ids$symbol, ids$median, decreasing = T),]ids_filtered &lt;- ids[!duplicated(ids$symbol),]dim(ids_filtered) ## [1] 8585 3 10过滤后的表达矩阵行名改为SYMBOL 把过滤后的表达矩阵更改行名为基因的symbol，因为这个时候探针和基因是一对一关系了。 1234exp_filter_no_symbol$probe_id &lt;- rownames(exp_filter_no_symbol)exp_ids &lt;- merge(ids_filtered, exp_filter_no_symbol, by ='probe_id' )rownames(exp_ids) &lt;- exp_ids$symbolexp_sym &lt;- exp_ids[,-c(1:3)] 11画第一个和所有样本的基于表达量的图 对第10步得到的表达矩阵进行探索，先画第一个样本的所有基因的表达量的boxplot,hist,density ， 然后画所有样本的 这些图 参考：http://bio-info-trainee.com/tmp/basic_visualization_for_expression_matrix.html 理解ggplot2的绘图语法，数据和图形元素的映射关系 1boxplot(exp_sym$CLL11.CEL) 1boxplot(exp_sym) 用ggplot2来画 ggplot2画图要改变数据形式 12345library(reshape2)exp_g &lt;- melt(exp_ids[,-c(1,3)], id.vars = 'symbol')exp_g$group &lt;- rep(group$Disease, each = nrow(exp_sym))colnames(exp_g)[2] &lt;- 'sample'head(exp_g) ## symbol sample value group ## 1 MAPK3 CLL11.CEL 5.743132 progres. ## 2 TIE1 CLL11.CEL 2.285143 progres. ## 3 CYP2C19 CLL11.CEL 3.309294 progres. ## 4 CXCR5 CLL11.CEL 7.544884 progres. ## 5 DUSP1 CLL11.CEL 5.083793 progres. ## 6 MMP10 CLL11.CEL 3.252213 progres. 第一个样本的 1library(ggplot2) ## Registered S3 methods overwritten by 'ggplot2': ## method from ## [.quosures rlang ## c.quosures rlang ## print.quosures rlang 12sample_1 &lt;- subset(exp_g, exp_g$sample=='CLL2.CEL')head(sample_1) ## symbol sample value group ## 120191 MAPK3 CLL2.CEL 5.966942 stable ## 120192 TIE1 CLL2.CEL 2.350073 stable ## 120193 CYP2C19 CLL2.CEL 3.427736 stable ## 120194 CXCR5 CLL2.CEL 7.545673 stable ## 120195 DUSP1 CLL2.CEL 9.611601 stable ## 120196 MMP10 CLL2.CEL 3.380044 stable 12p_s1 &lt;- ggplot(sample_1, aes(x = sample, y = value, fill = 'lightblue'))p_s1 + geom_boxplot() 1p_s1 + geom_violin()+geom_boxplot(fill = 'white') 12ggplot(sample_1, aes(x = value, fill = 'lightblue'))+ geom_histogram(bins = 500) 12ggplot(sample_1, aes(x = value, fill = 'lightblue'))+ geom_density() 下面是所有样本的 12p &lt;- ggplot(exp_g, aes(x = sample, y = value, fill = group))p + geom_boxplot() 1p + geom_violin() 12ggplot(exp_g, aes(x=value,fill = group))+ geom_histogram(bins = 500)+ facet_wrap(~group, nrow = 5) 12ggplot(exp_g, aes(x=value,fill = group))+ geom_density()+ facet_wrap(~group, nrow = 5) # 12 理解统计学指标mean,median,max,min,sd,var,mad 并计算出每个基因在所有样本的这些统计学指标，最后按照mad值排序，取top 50 mad值的基因，得到列表 12统计学指标 理解统计学指标mean,median,max,min,sd,var,mad并计算出每个基因在所有样本的这些统计学指标，最后按照mad值排序，取top 50 mad值的基因，得到列表 1head(exp_sym) ## CLL11.CEL CLL12.CEL CLL13.CEL CLL14.CEL CLL15.CEL CLL16.CEL ## MAPK3 5.743132 6.219412 5.523328 5.340477 5.229904 4.920686 ## TIE1 2.285143 2.291229 2.287986 2.295313 2.662170 2.278040 ## CYP2C19 3.309294 3.318466 3.354423 3.327130 3.365113 3.568353 ## CXCR5 7.544884 7.671801 7.474025 7.152482 6.902932 7.368660 ## DUSP1 5.083793 7.610593 7.631311 6.518594 5.059087 4.855161 ## MMP10 3.252213 3.288078 3.264168 3.217279 3.377575 3.365157 ## CLL17.CEL CLL18.CEL CLL19.CEL CLL20.CEL CLL21.CEL CLL22.CEL ## MAPK3 5.325348 4.826131 5.212387 5.285830 5.581859 6.251678 ## TIE1 2.350796 2.325163 2.432635 2.256547 2.348389 2.263849 ## CYP2C19 3.502440 3.394410 3.617099 3.279726 3.391734 3.306811 ## CXCR5 6.456285 6.824862 7.304803 8.757756 6.695295 7.372185 ## DUSP1 5.176975 4.874563 4.097580 9.250585 7.657463 7.683677 ## MMP10 3.451987 3.392632 3.574332 3.249886 3.269541 3.213493 ## CLL23.CEL CLL24.CEL CLL2.CEL CLL3.CEL CLL4.CEL CLL5.CEL CLL6.CEL ## MAPK3 5.480752 5.216033 5.966942 5.397508 5.281720 5.414718 5.460626 ## TIE1 2.264434 2.344079 2.350073 2.406846 2.341961 2.372928 2.356978 ## CYP2C19 3.341444 3.798335 3.427736 3.453564 3.412944 3.411922 3.396466 ## CXCR5 7.616749 6.839187 7.545673 8.802729 7.307752 7.491507 8.063202 ## DUSP1 8.700667 5.546996 9.611601 5.732182 6.483191 6.072558 9.919125 ## MMP10 3.330000 3.545541 3.380044 3.426736 3.311255 3.411775 3.376011 ## CLL7.CEL CLL8.CEL CLL9.CEL ## MAPK3 5.897821 5.253883 5.214155 ## TIE1 2.222276 2.254772 2.358544 ## CYP2C19 3.247276 3.255148 3.365746 ## CXCR5 7.014543 8.019108 7.432331 ## DUSP1 5.149411 4.989604 5.339848 ## MMP10 3.218438 3.271324 3.291604 12345678910exp_mean &lt;- apply(exp_sym, 1, mean)exp_median &lt;- apply(exp_sym,1, median)exp_max &lt;- apply(exp_sym, 1, max) exp_min &lt;- apply(exp_sym, 1, min)exp_sd &lt;- apply(exp_sym, 1, sd)exp_var &lt;- apply(exp_sym, 1, var)exp_md &lt;- apply(exp_sym, 1, mad)exp_sta &lt;- data.frame(exp_mean, exp_median, exp_max, exp_min, exp_sd, exp_var, exp_md)md_order &lt;- exp_sta[order(exp_sta$exp_md, decreasing = T),]md_order[1:50,1:5] ## exp_mean exp_median exp_max exp_min exp_sd ## FAM30A 5.708006 6.649724 9.901761 2.422295 2.7988082 ## IGF2BP3 4.801569 4.659068 8.899667 2.335350 2.2955054 ## DMD 6.791259 7.036325 10.653183 3.060286 2.5247064 ## TCF7 7.665692 7.697969 10.976634 4.547559 2.1667457 ## SLAMF1 5.385746 5.392873 8.385662 3.016306 1.9537439 ## FOS 7.204708 7.009703 10.831309 3.581185 2.1980961 ## LGALS1 6.612549 6.738502 9.275395 2.548286 2.0956955 ## IGLC1 10.912833 10.695933 14.895714 6.516660 2.6146697 ## ZAP70 5.395807 5.223290 7.581484 3.230575 1.5860361 ## FCN1 5.549464 5.280685 9.321022 3.221669 1.8535899 ## LHFPL2 5.880325 5.831304 8.627377 3.202529 1.7771356 ## HBB 10.451111 10.835714 13.089985 3.556112 2.6459011 ## S100A8 7.054067 7.125176 9.789312 3.976454 1.6721426 ## GUSBP11 9.152709 9.136234 12.387608 6.296077 1.9078900 ## COBLL1 6.307016 6.672768 8.602673 3.764972 1.7079344 ## VIPR1 5.001816 4.783675 7.947431 3.013597 1.7173512 ## PCDH9 7.564731 8.589865 10.379183 2.128020 2.8787582 ## IGH 7.504659 7.615107 9.961620 4.058258 1.6876278 ## ZNF804A 5.482021 4.933040 8.417146 3.489773 1.6262582 ## TRIB2 5.582121 5.382651 8.275038 3.262417 1.6285227 ## OAS1 5.781610 5.841878 7.812439 2.844634 1.5555384 ## CCL3 4.955042 4.528829 8.200438 2.892649 1.6758945 ## GNLY 5.758612 5.702251 7.874737 3.112976 1.4291897 ## CYBB 5.465935 4.990295 7.925110 3.741134 1.5086211 ## VAMP5 5.129844 5.224719 6.787208 3.168429 1.2736710 ## RNASE6 7.502004 7.475790 9.761536 4.561619 1.3692587 ## RGS2 8.665894 8.690715 11.060867 5.593852 1.6673174 ## PLXNC1 6.152678 6.011995 9.936706 4.282411 1.4519185 ## CAPG 7.147032 7.287538 9.311853 4.295201 1.3599095 ## RBM38 5.625046 5.984977 7.712013 2.364198 1.5115862 ## VCAN 5.724099 5.551630 9.690421 3.425727 1.6784676 ## APBB2 5.028141 4.991633 7.223220 3.534210 1.2951444 ## ARF6 9.261574 9.274190 11.084527 7.417333 1.1470937 ## TGFBI 7.719464 8.355828 10.336590 3.705677 2.1598336 ## NR4A2 5.332218 4.905362 10.162592 3.535849 1.7782290 ## S100A9 5.283652 5.121900 9.274989 3.360444 1.5913846 ## ZNF266 9.162509 8.963549 10.825413 7.465138 1.1059916 ## TSPYL2 5.334349 4.961360 9.606263 3.519564 1.5168915 ## CLEC2B 6.703088 6.200192 10.689725 4.346883 1.6435564 ## FLNA 7.261863 7.427031 8.892456 4.910564 1.2846904 ## H1FX 9.481071 9.371750 11.448482 6.315160 1.4222048 ## DUSP5 5.707280 5.662890 8.399445 3.096216 1.4659308 ## DUSP6 6.220190 6.163704 9.349607 3.924092 1.6169735 ## ANXA4 6.285188 6.575309 8.848398 3.290936 1.6485526 ## LPL 5.451203 4.535271 8.736220 3.497206 1.8272643 ## THEMIS2 7.060804 6.925227 8.676046 5.638975 0.9956062 ## P2RY14 5.503758 5.449599 9.268856 2.776078 1.7700218 ## ARHGAP44 5.823372 5.937855 8.171374 3.285610 1.3502894 ## TNFSF9 5.038986 4.935596 7.080714 2.827961 1.2324676 ## PFN2 5.427243 5.891385 7.621100 2.987904 1.3889489 13提取基因的表达矩阵子集，绘制热图 根据第12步骤得到top 50 mad值的基因列表来取表达矩阵的子集，并且热图可视化子表达矩阵。试试看其它5种热图的包的不同效果。 123names_50 &lt;- rownames(md_order[1:50,])exp_mad_top50 &lt;- exp_sym[match(names_50, rownames(exp_sym)),]pheatmap::pheatmap(log2(exp_mad_top50)) 1pheatmap::pheatmap(exp_mad_top50, scale=c("row")) 14取N个指标的交集并可视化： UpSetR包 取不同统计学指标mean,median,max,mean,sd,var,mad的各top50基因列表， 使用UpSetR包来看他们之间的overlap情况 12mean_50 &lt;- head(sort(exp_mean, decreasing = T),50)median_50 &lt;- head(sort(exp_median, decreasing = T),50) 写函数完成上述重复问题问题 123456sta_50 &lt;- function(x)&#123; x &lt;- head(sort((apply(exp_sym, 1, x)), decreasing = T),50) x_50 &lt;- x return(names((x_50)))&#125;library('UpSetR') 取不含重复的并集 1sta_50_all &lt;- unique(c(sta_50(mean), sta_50(median),sta_50(max),sta_50(min),sta_50(sd),sta_50(var), sta_50(mad))) 转成upset需要的格式，也就是1和0分别代表 1u_mean &lt;- ifelse(sta_50_all %in% sta_50(mean), 1, 0) 再写个函数 12345upset_sta &lt;- function(x)&#123; x &lt;- ifelse(sta_50_all %in% sta_50(x), 1, 0) u_x &lt;- x return(u_x)&#125; 123456upset_all &lt;- data.frame(sta_50_all, upset_sta(mean),upset_sta(median), upset_sta(max),upset_sta(min),upset_sta(sd),upset_sta(var),upset_sta(mad))?upsetupset(upset_all, nsets = 7, matrix.color = 'black',main.bar.color = 'green', sets.bar.color = 'red',point.size = 2, line.size = 0.8, shade.color = 'red', matrix.dot.alpha = 0.5) 15提取表型数据 在第二步的基础上面提取CLL包里面的data(sCLLex) 数据对象的样本的表型数据。 12data("sCLLex")pData(sCLLex) ## SampleID Disease ## CLL11.CEL CLL11 progres. ## CLL12.CEL CLL12 stable ## CLL13.CEL CLL13 progres. ## CLL14.CEL CLL14 progres. ## CLL15.CEL CLL15 progres. ## CLL16.CEL CLL16 progres. ## CLL17.CEL CLL17 stable ## CLL18.CEL CLL18 stable ## CLL19.CEL CLL19 progres. ## CLL20.CEL CLL20 stable ## CLL21.CEL CLL21 progres. ## CLL22.CEL CLL22 stable ## CLL23.CEL CLL23 progres. ## CLL24.CEL CLL24 stable ## CLL2.CEL CLL2 stable ## CLL3.CEL CLL3 progres. ## CLL4.CEL CLL4 progres. ## CLL5.CEL CLL5 progres. ## CLL6.CEL CLL6 progres. ## CLL7.CEL CLL7 progres. ## CLL8.CEL CLL8 progres. ## CLL9.CEL CLL9 stable 16对表达矩阵聚类画图添加表型数据 对所有样本的表达矩阵进行聚类并且绘图，然后添加样本的临床表型数据信息(更改样本名) #前面 1head(exp_sym) ## CLL11.CEL CLL12.CEL CLL13.CEL CLL14.CEL CLL15.CEL CLL16.CEL ## MAPK3 5.743132 6.219412 5.523328 5.340477 5.229904 4.920686 ## TIE1 2.285143 2.291229 2.287986 2.295313 2.662170 2.278040 ## CYP2C19 3.309294 3.318466 3.354423 3.327130 3.365113 3.568353 ## CXCR5 7.544884 7.671801 7.474025 7.152482 6.902932 7.368660 ## DUSP1 5.083793 7.610593 7.631311 6.518594 5.059087 4.855161 ## MMP10 3.252213 3.288078 3.264168 3.217279 3.377575 3.365157 ## CLL17.CEL CLL18.CEL CLL19.CEL CLL20.CEL CLL21.CEL CLL22.CEL ## MAPK3 5.325348 4.826131 5.212387 5.285830 5.581859 6.251678 ## TIE1 2.350796 2.325163 2.432635 2.256547 2.348389 2.263849 ## CYP2C19 3.502440 3.394410 3.617099 3.279726 3.391734 3.306811 ## CXCR5 6.456285 6.824862 7.304803 8.757756 6.695295 7.372185 ## DUSP1 5.176975 4.874563 4.097580 9.250585 7.657463 7.683677 ## MMP10 3.451987 3.392632 3.574332 3.249886 3.269541 3.213493 ## CLL23.CEL CLL24.CEL CLL2.CEL CLL3.CEL CLL4.CEL CLL5.CEL CLL6.CEL ## MAPK3 5.480752 5.216033 5.966942 5.397508 5.281720 5.414718 5.460626 ## TIE1 2.264434 2.344079 2.350073 2.406846 2.341961 2.372928 2.356978 ## CYP2C19 3.341444 3.798335 3.427736 3.453564 3.412944 3.411922 3.396466 ## CXCR5 7.616749 6.839187 7.545673 8.802729 7.307752 7.491507 8.063202 ## DUSP1 8.700667 5.546996 9.611601 5.732182 6.483191 6.072558 9.919125 ## MMP10 3.330000 3.545541 3.380044 3.426736 3.311255 3.411775 3.376011 ## CLL7.CEL CLL8.CEL CLL9.CEL ## MAPK3 5.897821 5.253883 5.214155 ## TIE1 2.222276 2.254772 2.358544 ## CYP2C19 3.247276 3.255148 3.365746 ## CXCR5 7.014543 8.019108 7.432331 ## DUSP1 5.149411 4.989604 5.339848 ## MMP10 3.218438 3.271324 3.291604 123group_list &lt;- as.character(pData(sCLLex)[,2])colnames(exp_sym) &lt;- paste(group_list, 1:22, sep = '')head(exp_sym) ## progres.1 stable2 progres.3 progres.4 progres.5 progres.6 ## MAPK3 5.743132 6.219412 5.523328 5.340477 5.229904 4.920686 ## TIE1 2.285143 2.291229 2.287986 2.295313 2.662170 2.278040 ## CYP2C19 3.309294 3.318466 3.354423 3.327130 3.365113 3.568353 ## CXCR5 7.544884 7.671801 7.474025 7.152482 6.902932 7.368660 ## DUSP1 5.083793 7.610593 7.631311 6.518594 5.059087 4.855161 ## MMP10 3.252213 3.288078 3.264168 3.217279 3.377575 3.365157 ## stable7 stable8 progres.9 stable10 progres.11 stable12 ## MAPK3 5.325348 4.826131 5.212387 5.285830 5.581859 6.251678 ## TIE1 2.350796 2.325163 2.432635 2.256547 2.348389 2.263849 ## CYP2C19 3.502440 3.394410 3.617099 3.279726 3.391734 3.306811 ## CXCR5 6.456285 6.824862 7.304803 8.757756 6.695295 7.372185 ## DUSP1 5.176975 4.874563 4.097580 9.250585 7.657463 7.683677 ## MMP10 3.451987 3.392632 3.574332 3.249886 3.269541 3.213493 ## progres.13 stable14 stable15 progres.16 progres.17 progres.18 ## MAPK3 5.480752 5.216033 5.966942 5.397508 5.281720 5.414718 ## TIE1 2.264434 2.344079 2.350073 2.406846 2.341961 2.372928 ## CYP2C19 3.341444 3.798335 3.427736 3.453564 3.412944 3.411922 ## CXCR5 7.616749 6.839187 7.545673 8.802729 7.307752 7.491507 ## DUSP1 8.700667 5.546996 9.611601 5.732182 6.483191 6.072558 ## MMP10 3.330000 3.545541 3.380044 3.426736 3.311255 3.411775 ## progres.19 progres.20 progres.21 stable22 ## MAPK3 5.460626 5.897821 5.253883 5.214155 ## TIE1 2.356978 2.222276 2.254772 2.358544 ## CYP2C19 3.396466 3.247276 3.255148 3.365746 ## CXCR5 8.063202 7.014543 8.019108 7.432331 ## DUSP1 9.919125 5.149411 4.989604 5.339848 ## MMP10 3.376011 3.218438 3.271324 3.291604 12t.exp &lt;- t(exp_sym)t.exp[1:5,1:5] ## MAPK3 TIE1 CYP2C19 CXCR5 DUSP1 ## progres.1 5.743132 2.285143 3.309294 7.544884 5.083793 ## stable2 6.219412 2.291229 3.318466 7.671801 7.610593 ## progres.3 5.523328 2.287986 3.354423 7.474025 7.631311 ## progres.4 5.340477 2.295313 3.327130 7.152482 6.518594 ## progres.5 5.229904 2.662170 3.365113 6.902932 5.059087 12hc &lt;- hclust(dist(t.exp))plot(as.dendrogram(hc)) 用factoextra包画 123exp_cluster &lt;- t(exp_sym)exp_clust_dist &lt;- dist(exp_cluster, method = 'euclidean')hc &lt;- hclust(exp_clust_dist,'ward.D') 1library(factoextra) ## Welcome! Related Books: `Practical Guide To Cluster Analysis in R` at https://goo.gl/13EFCZ 123fviz_dend(hc, k=4, cex = 0.5, k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"), color_labels_by_k = TRUE, rect = TRUE) 17对所有样本PCA分析添加表型信息 对所有样本的表达矩阵进行PCA分析并且绘图，同样要添加表型信息 12library(devtools)install_github('sinhrks/ggfortify') ## Skipping install of 'ggfortify' from a github remote, the SHA1 (107768f6) has not changed since last install. ## Use `force = TRUE` to force installation 12345library(ggfortify)df &lt;- as.data.frame(t(exp_sym))df$group &lt;- group$Diseaseautoplot(prcomp(df[,1:(ncol(df)-1)]), data=df, label = TRUE, colour = 'group') 18所有样本表达矩阵批量T检验 根据表达矩阵及样本分组信息进行批量T检验，得到检验结果表格 1234567891011dat &lt;- exp_symgroup_list &lt;- as.factor(group_list)group1 &lt;- which(group_list == levels(group_list)[1])group2 &lt;- which(group_list == levels(group_list)[2])dat1 &lt;- dat[,group1]dat2 &lt;- dat[,group2]dat &lt;- cbind(dat1, dat2)pvals &lt;- apply(dat, 1, function(x)&#123; t.test(as.numeric(x)~group_list)$p.value&#125;)head(pvals) ## MAPK3 TIE1 CYP2C19 CXCR5 DUSP1 MMP10 ## 0.65221728 0.32547921 0.10930650 0.52972986 0.11181740 0.08771106 12p.adj &lt;- p.adjust(pvals, method = 'BH')avg_1 &lt;- log2(rowMeans(dat1)) ## Warning: NaNs produced 1avg_2 &lt;- log2(rowMeans(dat2)) ## Warning: NaNs produced 1234log2FC &lt;- avg_2-avg_1deg_t.test &lt;- cbind(avg_1, avg_2, log2FC, pvals, p.adj)deg_t.test &lt;- deg_t.test[order(deg_t.test[,4]),]head(deg_t.test) ## avg_1 avg_2 log2FC pvals p.adj ## ST14 2.491256 2.364128 -0.12712815 0.0001236326 0.4156259 ## LTB 2.961047 2.807431 -0.15361585 0.0002103122 0.4156259 ## CORO1A 3.239158 3.149793 -0.08936553 0.0002370691 0.4156259 ## PPM1D 2.356110 2.425399 0.06928926 0.0004783848 0.4156259 ## ORAI2 2.459287 2.199910 -0.25937653 0.0005244971 0.4156259 ## GNAI2 3.319264 3.275868 -0.04339579 0.0005434369 0.4156259 1class(deg_t.test) ## [1] &quot;matrix&quot; 19limma包进行DEGs分析 使用limma包对表达矩阵及样本分组信息进行差异分析，得到差异分析表格， 重点看logFC和P值，画个火山图(就是logFC和-log10(P值)的散点图)。 19.1 构建设计矩阵design matrix 1library(limma) ## ## Attaching package: 'limma' ## The following object is masked from 'package:BiocGenerics': ## ## plotMA 1234design &lt;- model.matrix(~0+factor(group_list))colnames(design) &lt;- levels(factor(group_list))rownames(design) &lt;- colnames(exp_sym)design ## progres. stable ## progres.1 1 0 ## stable2 0 1 ## progres.3 1 0 ## progres.4 1 0 ## progres.5 1 0 ## progres.6 1 0 ## stable7 0 1 ## stable8 0 1 ## progres.9 1 0 ## stable10 0 1 ## progres.11 1 0 ## stable12 0 1 ## progres.13 1 0 ## stable14 0 1 ## stable15 0 1 ## progres.16 1 0 ## progres.17 1 0 ## progres.18 1 0 ## progres.19 1 0 ## progres.20 1 0 ## progres.21 1 0 ## stable22 0 1 ## attr(,&quot;assign&quot;) ## [1] 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`factor(group_list)` ## [1] &quot;contr.treatment&quot; 1fit &lt;- lmFit(exp_sym, design) 19.2 构建比较矩阵 1234contrast.matrix &lt;- makeContrasts(paste0(unique(group_list), collapse = '-'), levels = design)fit2 &lt;- contrasts.fit(fit, contrast.matrix)fit3 &lt;- eBayes(fit2) 19.3差异表达矩阵获取 123mtx &lt;- topTable(fit3, coef = 1, n=Inf)DEG_mtx &lt;- na.omit(mtx)dim(mtx) ## [1] 8585 6 1dim(DEG_mtx) ## [1] 8585 6 1head(DEG_mtx) ## logFC AveExpr t P.Value adj.P.Val B ## TBC1D2B -1.0284628 5.620700 -5.837412 8.241439e-06 0.02237023 3.351806 ## CLIC1 0.9888221 9.954273 5.772861 9.560444e-06 0.02237023 3.230776 ## DLEU1 1.8301554 6.950685 5.740842 1.029277e-05 0.02237023 3.170506 ## SH3BP2 -1.3835699 4.463438 -5.735395 1.042294e-05 0.02237023 3.160238 ## GPM6A 2.5471980 6.915045 5.043131 5.269777e-05 0.08731675 1.821536 ## YTHDC2 -0.5187135 7.602354 -4.873850 7.879310e-05 0.08731675 1.485255 1#write.csv(DEG_mtx,"DEG_mtx.csv",quote = F) 19.4火山图 第一步，设定阈值 界定上调下调和不表达的基因 12345DEG &lt;- DEG_mtxlogFC_cutoff &lt;- with(DEG, mean(abs(logFC))+2*sd(abs(logFC)))DEG$change = as.factor(ifelse(DEG$P.Value &lt; 0.05 &amp; abs(DEG$logFC) &gt; logFC_cutoff, ifelse(DEG$logFC &gt; logFC_cutoff ,'UP','DOWN'),'NOT')) 这是两个ifelse判断嵌套。先了解ifelse的结构，ifelse（条件，yes，no），如果满足条件，那么返回yes/或者执行yes所处的下一个命令；反之返回no 这里外层的ifelse中DEG$P.Value &lt; 0.05 &amp; abs(DEG$logFC) &gt; logFC_cutoff是判断条件，这个就是看p值和logFC是不是达到了他们设定的阈值【p是0.05，logFC是logFC_cutoff】，如果达到了就进行下一个ifelse，达不到就返回NOT； 第二层ifelse也是上来一个条件：DEG$logFC &gt; logFC_cutoff，如果达到了，就返回UP即上调基因，达不到就是下调DOWN 最后将判断结果转位因子型，得到DOWN、UP、NOT的三种因子 第二步，设定火山图标题 1234this_tile &lt;- paste0('Cutoff for logFC is ',round(logFC_cutoff,3), '\nThe number of up gene is ',nrow(DEG[DEG$change =='UP',]) , '\nThe number of down gene is ',nrow(DEG[DEG$change =='DOWN',])) 第三步，画图 1234567g = ggplot(data=DEG, aes(x=logFC, y=-log10(P.Value), color=change)) + geom_point(alpha=0.4, size=1.75) + theme_set(theme_set(theme_bw(base_size=20)))+ xlab("log2 fold change") + ylab("-log10 p-value") + ggtitle( this_tile ) + theme(plot.title = element_text(size=15,hjust = 0.5))+ scale_colour_manual(values = c('blue','black','red')) ## corresponding to the levels(res$change)print(g) 第四步，画个漂亮的图 123456789101112131415161718192021222324P_volcano=ggplot(DEG,aes(x=logFC,y=-log10(P.Value)))+ geom_point(aes(color=change))+ #设置点的颜色 scale_color_manual(values =c("UP" = "red", "DOWN" = "blue", "NOT" = "grey"))+ labs(x="log2FC",y="-log10FDR")+ #增加阈值线:分别对应FDR=0.05,|log2FC|=1 geom_hline(yintercept=-log10(0.05),linetype=4)+ geom_vline(xintercept=c(-1,1),linetype=4)+ xlim(-3,3)+ theme(plot.title = element_text(size = 25,face = "bold", vjust = 0.5, hjust = 0.5), legend.title = element_blank(), legend.text = element_text(size = 18, face = "bold"), legend.position = 'right', legend.key.size=unit(0.8,'cm'), axis.ticks.x=element_blank(), axis.text.x=element_text(size = 15,face = "bold", vjust = 0.5, hjust = 0.5), axis.text.y=element_text(size = 15,face = "bold", vjust = 0.5, hjust = 0.5), axis.title.x = element_text(size = 20,face = "bold", vjust = 0.5, hjust = 0.5), axis.title.y = element_text(size = 20,face = "bold", vjust = 0.5, hjust = 0.5), panel.background = element_rect(fill = "transparent",colour = "black"), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), plot.background = element_rect(fill = "transparent",colour = "black"))P_volcano 20T检验结果和limma结果比较 对T检验结果的P值和limma包差异分析的P值画散点图，看看哪些基因相差很大 123deg_t.test &lt;- as.data.frame(deg_t.test)t_limma_pval &lt;- cbind(deg_t.test,DEG)[,c(4,9)]head(t_limma_pval) ## pvals P.Value ## ST14 0.0001236326 8.241439e-06 ## LTB 0.0002103122 9.560444e-06 ## CORO1A 0.0002370691 1.029277e-05 ## PPM1D 0.0004783848 1.042294e-05 ## ORAI2 0.0005244971 5.269777e-05 ## GNAI2 0.0005434369 7.879310e-05 1plot(t_limma_pval) 1pheatmap::pheatmap(cor(t_limma_pval)) 看哪些基因在两种方法种的p值差异比较大]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
        <tag>生物信息学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github图表加到网页角落]]></title>
    <url>%2F2019%2F04%2F29%2F%E7%BD%91%E9%A1%B5%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%98%BE%E7%A4%BAgithub%2F</url>
    <content type="text"><![CDATA[1 去这里或这里找喜欢的样式 找一个合适并喜欢的样式，复制方框的代码 前面的ribbons容易位置错误 2 打开主题目录下的_layout.swig文件文件 \themes\next\layout 打开后，在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面（大概23行） 粘贴刚才复制的代码，改成你自己的github名字就可以了。 另外，这里可以延伸。放自己可以链接的外地址，并加上图片，道理一样。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同一个github账户绑定两个域名]]></title>
    <url>%2F2019%2F04%2F29%2F%E5%90%8C%E4%B8%80%E4%B8%AAgithub%E8%B4%A6%E6%88%B7%E7%BB%91%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[一个github账号可以建立很多仓库，但是只能有一个个人主页仓库，其余都是项目仓库。主页仓库就是你的名字.github.io这个，其余的就是https://github.com/hyinli/项目名称这种。 前面已经建立个人主页仓库并绑定域名，现在再利用项目仓库网页并绑定个人域名。具体如下 1 先建立个人项目仓库比如名字kk 2 建gh-pages分支（不能用master） 3 域名解析 其中，IP这样获得 ping 你的名字.github.io 4 根目录的source文件夹见CNAME文件 首行写入你要绑定的域名，可以带www 说明：网上建议裸域名。但是是可以带www的，只是项目仓库必须建在gh-pages分支，master分支会一直提示错误。 5 根目录的’config.yml文件，修改 6 github 项目仓库，setting 填入你的域名，带www —The end—]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>个人域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github两个账户不能进行push的解决办法]]></title>
    <url>%2F2019%2F04%2F28%2Fgithub%E4%B8%A4%E4%B8%AA%E8%B4%A6%E6%88%B7%E4%B8%8D%E8%83%BD%E8%BF%9B%E8%A1%8Cpush%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[因为邮箱和本地电脑问题，我重新申请了github账号，但使用新账户申请博客的时候push出现问题，无法进行推送。windows系统解决办法如下 搜索“凭据管理器”，进入windows凭据，普通凭据， 然后把三个与github相关的删除即可。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo+个人域名建立个人网站]]></title>
    <url>%2F2019%2F04%2F28%2Fgithub%2Bhexo%2B%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[写在前面： 之前一直用hugo结合github使用，这次尝试hexo，发现非常喜欢，可塑性很强。 主要记录一些坑 这个博文主要是大体记录流程，至于中间参考过的3篇建站文章会列出来。总之根据这篇博文你可以完全搭建属于自己的个性网站。 1 github的工作 1 注册github，不再描述 2 建立repo 记得repo名字要和github id一样。也就是如果你的id是hello,那么要申请一个hello.github.io的repo。 2 本地电脑的工作 请参考https://www.jianshu.com/p/189fd945f38f 大体分为以下几步 1下载安装Git 2下载安装node.js 3安装hexo并进行初始化 选择某个盘，创建hexo文件夹，别的名字也行 12npm install -g hexohexo init 4修改config.yml文件，关键是theme 稍许，hexo文件夹里会出现很多内容。用notepad++打开_config.yml文件，修改 title（博客名字） subtite(副标题） author（作者名字） 关键是theme ，系统默认是landscape，也可以查看更多主题。个人比较喜欢next主题，另外， black-blue, BlueLake, pure主题也不错。每个主题都会告诉你下载方式，直接参照进行就行，手动下载或git clone下载。 其余部分可以暂时不动。（现在也可以更改，看2.7.1）下载后的主题会存放在hexo下的themes文件夹里。 这个地方是hugo是不一样的处理方式，hugo要吧主题的example文件下的内容进行copy替换。而hexo是同时处理根目录和主题目录。 5生成网站并在线查看 现在就可以在本地电脑查看雏形了. 12hexo ghexo s 若要查看更多hexo命令，请移步查看更多hexo命令 hexo s后，会提示端口，复制就可以本地访问，都是localhost：4000 6 写第一篇文章 刚才说了hexo是根目录和主题下目录多要修改一些内容。所以，往下会加上根目录（代表\hexo），主题目录代表（\hexo\themes\next）。 写文章是在根目录：\hexo\source_posts。如果你在简书有文章，可以直接复制，可以完美识别。记得如果用toc功能，需要#后又空格，否则不被识别。 写完后，再次hexo s既可以看到更新。 7 部署到github 1 更改根目录_config.yml，最好需要有以下内容 1234deploy: type: git repository: https://github.com/你的名字/你的名字.github.io.git branch: master 2 安装hexo-deployer-git自动部署发布工具 1npm install hexo-deployer-git --save 3 发布到github 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 如果初次使用需要输入用户名密码之类，牢记，这样你的github repo就会有你刚才push的内容 4 在线访问 https://你的名字.github.io/ 我的是https://hyinli.github.io/可以查看 3主题配置 这部分花费时间比较多，所以单列出来。 现在雏形已经具备，接下来要进行主题配置，添加一些比较有用的插件等。hexo有很多插件 各种各样的配置，一定有你喜欢的。 这部分主要参考这两篇文章,非常详尽，如果还有你想不到的内容，那就单项google搜索。 Windows下使用hexo搭建博客 Hexo+NexT搭建博客拥抱舒爽 主要包括有 语言，类别，标签，菜单，头像，统计在线时间，访问量，等。这些不再赘述。 1 开启文章目录 请参考Hexo博客NexT主题开启文章目录和调整样式 nextT本身有目录的，我们需要开启它 1 修改custom.styl themes/next/source/css/_custom notpad++打开，添加以下内容 打开及调整目录字体 1234567#文章目录默认展开//文章目录默认展开.post-toc .nav .nav-child &#123; display: block; &#125;#目录字体大小调整.post-toc ol &#123; font-size : 13px; &#125; 修改主题配置文件themes/next/_config.yml 目录换行 123toc: enable: true wrap: true #文章目录无法锚定的问题 假如出现，文章目录生成，但是就不能链接到正确的地方。如果自己的操作没错误，那就执行 123hexo clean命令#然后hexo d -g 4 被百度和google搜索引擎能搜索到，参考上述两篇文章 5 绑定个人域名 1 购买个人域名 我是阿里云买的 2 域名解析 设置如下 3 Hexo设置 \hexo\source下创建CNAME文件（没有后缀，且全部大写），notepad++打开，首行写上你购买的域名 我的就是 http://www.ucco.net 网上有人建议必要加www 但是这样设置后 看起来非常不好看，我又加上了 4 github设置 再回到github，打开你的名字.github.io中的setteings，修正以下内容 custom domain中，]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>域名</tag>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生信技能树R作业答案-中级]]></title>
    <url>%2F2019%2F04%2F27%2F%E7%94%9F%E4%BF%A1%E6%8A%80%E8%83%BD%E6%A0%91R%E4%BD%9C%E4%B8%9A%E4%B8%AD%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[#作业在这里 123456789101112131415161718192021222324252627282930rm(list = ls()) options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirror# https://bioconductor.org/packages/release/bioc/html/GEOquery.htmlif (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;)BiocManager::install(&quot;KEGG.db&quot;,ask = F,update = F)BiocManager::install(c(&quot;GSEABase&quot;,&quot;GSVA&quot;,&quot;clusterProfiler&quot; ),ask = F,update = F)BiocManager::install(c(&quot;GEOquery&quot;,&quot;limma&quot;,&quot;impute&quot; ),ask = F,update = F)BiocManager::install(c(&quot;genefu&quot;,&quot;org.Hs.eg.db&quot;,&quot;hgu133plus2.db&quot; ),ask = F,update = F)options()$reposinstall.packages(&apos;WGCNA&apos;)install.packages(c(&quot;FactoMineR&quot;, &quot;factoextra&quot;))install.packages(c(&quot;ggplot2&quot;, &quot;pheatmap&quot;,&quot;ggpubr&quot;))library(&quot;FactoMineR&quot;)library(&quot;factoextra&quot;)library(GSEABase)library(GSVA)library(clusterProfiler)library(genefu)library(ggplot2)library(ggpubr)library(hgu133plus2.db)library(limma)library(org.Hs.eg.db)library(pheatmap) Task1: 通过R注释包从ensemble到symbol 请根据R包org.Hs.eg.db找到下面ensembl 基因ID 对应的基因名(symbol) 123456# ENSG00000000003.13# ENSG00000000005.5# ENSG00000000419.11# ENSG00000000457.12# ENSG00000000460.15# ENSG00000000938.11 1234567891011library(org.Hs.eg.db)ls(&quot;package:org.Hs.eg.db&quot;)g2s &lt;- toTable(org.Hs.egSYMBOL)g2e &lt;- toTable(org.Hs.egENSEMBL)head(g2s)head(g2e)g2se &lt;- merge(g2s, g2e, by=&apos;gene_id&apos;)head(g2se)ensID1 &lt;- c(&quot;ENSG00000000003.13&quot;,&quot;ENSG00000000005.5&quot;,&quot;ENSG00000000419.11&quot;, &quot;ENSG00000000457.12&quot;,&quot;ENSG00000000460.15&quot;,&quot;ENSG00000000938.11&quot;)ensID &lt;- data.frame(ensID1) Method1:for循环 12345678for (i in 1:nrow(ensID)) &#123; ens_i &lt;- strsplit(as.character(ensID[i,1]),&apos;.&apos;,fixed = TRUE)[[1]][1] ensID[i,2]&lt;-ens_i&#125;ensID$ensembl_id &lt;- NULLcolnames(ensID)[1] &lt;- &apos;ensembl_id&apos; ensID_last &lt;- merge(ensID, g2se, &apos;ensembl_id&apos;)ensID_last Method2:apply函数 123ensID$ensembl_id &lt;- unlist(lapply(ensID1, function(x) &#123;strsplit(as.character(x),&apos;.&apos;,fixed = TRUE)[[1]][1] &#125;))ensID_last2 &lt;- merge(ensID, g2se,&quot;ensembl_id&quot;) Task2:由探针找到对应的基因名 根据R包hgu133a.db找到下面探针对应的基因名(symbol) 053_at 117_at 121_at 1255_g_at 1316_at 1320_at 1405_i_at 1431_at 1438_at 1487_at 1494_f_at 1598_g_at 160020_at 1729_at 177_at 1234567library(hgu133a.db)ids &lt;- toTable(hgu133aSYMBOL)head(ids)myids &lt;- read.table(file = &quot;my_probe_ids.txt&quot;)colnames(myids) &lt;- &quot;probe_id&quot;myid_sym &lt;- merge(myids, ids, by=&quot;probe_id&quot;)head(myid_sym) Task3 找某个基因在表达矩阵中的值并分组绘图 1234567# 找到R包CLL内置的数据集的表达矩阵里面的TP53基因的表达量，并且绘制在 progres.-stable分组的boxplot图# 提示：# suppressPackageStartupMessages(library(CLL))# data(sCLLex)# sCLLex# exprSet=exprs(sCLLex) # library(hgu95av2.db) 以下是代码部分 123456789rm(list=ls())library(CLL)data(sCLLex)expr &lt;- exprs(sCLLex)pdata &lt;- pData(sCLLex)head(expr)library(hgu95av2.db)probe_sym &lt;- toTable(hgu95av2SYMBOL)tp53_probes &lt;- probe_sym[grep(&quot;TP53$&quot;, probe_sym$symbol),] 1234# probe_id symbol# 966 1939_at TP53# 997 1974_s_at TP53# 1420 31618_at TP53 1boxplot(expr[&apos;1939_at&apos;,]~pdata$Disease) ggpubr http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/ 1234567891011121314library(ggpubr)tp53_pub &lt;- cbind(expr[&apos;1939_at&apos;,], as.data.frame(pdata$Disease))colnames(tp53_pub) &lt;- c(&apos;Expression&apos;,&quot;Group&quot;)p &lt;- ggboxplot(tp53_pub, y=&apos;Expression&apos;, x=&apos;Group&apos;,fill = &apos;Group&apos;, palette = &apos;aaas&apos; ,add = &apos;jitter&apos;)# &quot;npg&quot;, &quot;aaas&quot;, &quot;lancet&quot;, &quot;jco&quot;, &quot;ucscgb&quot;, &quot;uchicago&quot;, &quot;simpsons&quot; &quot;rickandmorty&quot;p + stat_compare_means()p + stat_compare_means(method = &apos;t.test&apos;)#the violin plotmy_comparisons &lt;- list(c(&quot;progress.&quot;, &quot;stable&quot;))ggviolin(tp53_pub, y=&apos;Expression&apos;, x=&apos;Group&apos;,fill = &apos;Group&apos;, palette = &apos;aaas&apos; ,add = &apos;boxplot&apos;, add.params = list(fill = &apos;white&apos;))+ stat_compare_means(comparisons = my_comparisons, method = &quot;t.test&quot;)+ stat_compare_means(label.y = 5) Task4:对任意肿瘤的任意基因进行分类做图（用cBioPortal） cbioportal下载，即利用在线数据（下载），本地进行改观 http://www.cbioportal.org/index.do Select Studies 选项中输入Breast Invasive Carcinoma PanCancer 搜索并选中目标数据集 Enter Genes 数据框中输入目标基因BRCA1 点击Submit Query提交搜索请求 结果页面中，Plots选项卡选择合适数据进行绘图，或下载数据 12345678910rm(list = ls())options(stringsAsFactors = F)a=read.table(&apos;e4-plot.txt&apos;,sep = &apos;\t&apos;,fill = T,header = T)View(a)colnames(a)=c(&apos;id&apos;,&apos;subtype&apos;,&apos;expression&apos;,&apos;mut&apos;)dat=alibrary(ggstatsplot)ggbetweenstats(data =dat, x = subtype, y = expression)library(ggplot2)ggsave(&apos;plot-again-BRCA1-TCGA-BRCA-cbioportal.png&apos;) Task5:某基因在某肿瘤中的生存曲线作图美化 找到TP53基因在TCGA数据库的乳腺癌数据集的表达量分组看其是否影响生存 提示使用：http://www.oncolnc.org/ 值得商榷的问题，low和high分组问题，若50：50分组，无差异 个人理解，这里不必平分，可以30：30，也就是就挑高和低的30%，这是可以说明问题的 123456789101112131415rm(list = ls())options(stringsAsFactors = F)a=read.table(&apos;BRCA_7157_50_50.csv&apos;,sep = &apos;,&apos;,fill = T,header = T)#View(a)dat=alibrary(ggplot2)library(survival)library(survminer) table(dat$Status)dat$Status=ifelse(dat$Status==&apos;Dead&apos;,1,0)sfit &lt;- survfit(Surv(Days, Status)~Group, data=dat)sfitsummary(sfit)ggsurvplot(sfit, conf.int=F, pval=TRUE)ggsave(&apos;survival_TP53_in_BRCA_TCGA.png&apos;) Task6：GEO下载表达数据并提取特定的基因做热图（要去重复） 下载数据集GSE17215的表达矩阵并且提取下面的基因画热图 ACTR3B ANLN BAG1 BCL2 BIRC5 BLVRA CCNB1 CCNE1 CDC20 CDC6 CDCA1 CDH3 CENPF CEP55 CXXC5 EGFR ERBB2 ESR1 EXO1 FGFR4 FOXA1 FOXC1 GPR160 GRB7 KIF2C KNTC2 KRT14 KRT17 KRT5 MAPT MDM2 MELK MIA MKI67 MLPH MMP11 MYBL2 MYC NAT1 ORC6L PGR PHGDH PTTG1 RRM2 SFRP1 SLC39A6 TMEM45B TYMS UBE2C UBE2T GSE17215数据在https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE17215 可知，是U133A的芯片数据,共6个样本 title为Expression data from paclitaxel and salinomycin-treated HMLER breast cancer cells 1library(hgu133a.db) 有三种方法得到表达数据 1.下载.CEL格式文件，自己进行处理 2.手动下载series Matrix Files，然后读入 3.利用R下载表达数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344library(GEOquery)library(GEOquery)#GEO使用https://www.bioconductor.org/packages/release/bioc/vignettes/GEOquery/inst/doc/GEOquery.htmlgse17215 &lt;- getGEO(&apos;GSE17215&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse17215)dat &lt;- exprs(gse17215[[1]])pdata_17215 &lt;- pData(gse17215[[1]])pdata_17215$`agent:ch1`#提取hgu133a包中的probe_id和symbolids &lt;- toTable(hgu133aSYMBOL)dat &lt;- dat[ids$probe_id,]#合并，也可以用merge#这里有个问题，一共50个基因名，但是得到的是87个探针，也就是有一个gene对应几个探针的情况#怎么处理？ 取median或者去p最小的,也有取均值的,#先把median加到ids最后一列ids$median &lt;- apply(dat, 1, median)head(ids)ids &lt;- ids[order(ids$symbol, ids$median, decreasing = T),]head(ids)ids_dup &lt;- ids[!duplicated(ids$symbol),]head(ids_dup)dat &lt;- dat[ids_dup$probe_id,]dim(dat)#这样就得到了去重重复的探针在6个样本中的表达信息，但没有基因名dat &lt;- as.data.frame(dat)dat$probe_id &lt;- rownames(dat)dat_symbol &lt;- merge(dat, ids, by =&quot;probe_id&quot;)#载入50个基因名genes &lt;- &apos;ACTR3B ANLN BAG1 BCL2 BIRC5 BLVRA CCNB1 CCNE1 CDC20 CDC6 CDCA1 CDH3 CENPF CEP55 CXXC5 EGFR ERBB2 ESR1 EXO1 FGFR4 FOXA1 FOXC1 GPR160 GRB7 KIF2C KNTC2 KRT14 KRT17 KRT5 MAPT MDM2 MELK MIA MKI67 MLPH MMP11 MYBL2 MYC NAT1 ORC6L PGR PHGDH PTTG1 RRM2 SFRP1 SLC39A6 TMEM45B TYMS UBE2C UBE2T&apos;genes &lt;- strsplit(genes, &apos; &apos;)[[1]]genes &lt;- data.frame(genes)colnames(genes) &lt;- &apos;symbol&apos;genes_expr &lt;- merge(genes, dat_symbol, by =&apos;symbol&apos;)#至此完成了探针过滤，加基因名等操作#取对数genes_expr &lt;- log2(dat+1)heat_expr &lt;- genes_expr[,-c(2,9)]rownames(heat_expr) &lt;- heat_expr$symbol heat_expr &lt;- heat_expr[,-1]heat_expr &lt;- log2(heat_expr+1)pheatmap::pheatmap(heat_expr, scale = &apos;row&apos;)ggcorrplot::ggcorrplot(cor(heat_expr)) Task7:GEO下载表达矩阵做样本的相关性热图，需要标记样本分组信息 作业7 下载数据集GSE24673的表达矩阵计算样本的相关性并且绘制热图，需要标记上样本分组信息 数据地址https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE24673 12345678910111213rm(list=ls())options(stringsAsFactors = F) gse24673 &lt;- getGEO(&apos;GSE24673&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse24673)dat &lt;- exprs(gse24673[[1]])pdata_24673 &lt;- pData(gse24673[[1]]) pdata_24673 &lt;- pdata_24673$source_name_ch1pdata_24673 &lt;- data.frame(Group = pdata_24673)#添加分组信息rownames(pdata_24673) &lt;- colnames(cor_dat)pheatmap::pheatmap(cor_dat, annotation_col=pdata_24673) Task8： 找到芯片对应平台的注释包并进行安装 找到 GPL6244 platform of Affymetrix Human Gene 1.0 ST Array 对应的R的bioconductor注释包，并且安装它！ 参考http://www.bio-info-trainee.com/1399.html 1234567options()$reposoptions()$BioC_mirror options(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))BiocManager::install(&quot;hugene10sttranscriptcluster.db&quot;,ask = F,update = F)options()$reposoptions()$BioC_mirror Task9：GEO下载表达矩阵，所有样本中挑选所需要的探针 下载数据集GSE42872的表达矩阵，并且分别挑选出所有样本的(平均表达量/sd/mad/)最大的探针， 并且找到它们对应的基因。 1234567891011121314151617181920212223242526rm(list=ls())options(stringsAsFactors = F) gse42872 &lt;- getGEO(&apos;GSE42872&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse42872)dat &lt;- as.data.frame(exprs(gse42872[[1]]))pdata_42872 &lt;- pData(gse42872[[1]]) pdata_42872 &lt;- pdata_42872$source_name_ch1pdata_42872 &lt;- data.frame(Group = pdata_42872)max_mean &lt;- names(sort(apply(dat,1, mean), decreasing = T))[1]max_sd &lt;- names(sort(apply(dat,1, sd), decreasing = T))[1]max_mad &lt;- names(sort(apply(dat,1, mad), decreasing = T))[1]str(max_max)library(hugene10sttranscriptcluster.db)list(hugene10sttranscriptcluster.db)###find the corresponding genes for the probesids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)ids[match(max_mad, ids$probe_id),]#或者select(hugene10sttranscriptcluster.db, keys = c(max_sd, max_mad, max_mean), columns = c(&quot;SYMBOL&quot;), keytype = &quot;PROBEID&quot;)##注意，max_mad探针对应着很多基因名 10 Task10 这部分内容参考http://www.bio-info-trainee.com/bioconductor_China/software/limma.html 下载数据集GSE42872的表达矩阵，并且根据分组使用limma做差异分析， 得到差异结果矩阵 12345678910111213141516171819202122232425262728293031323334library(GEOquery)rm(list=ls())options(stringsAsFactors = F) gse42872 &lt;- getGEO(&apos;GSE42872&apos;, GSEMatrix = TRUE, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse42872)dat &lt;- as.data.frame(exprs(gse42872[[1]]))pdata_42872 &lt;- pData(gse42872[[1]]) pdata_42872 &lt;- pdata_42872$titlegroup &lt;- unlist(lapply(pdata_42872, function(x)&#123; strsplit(x,&apos; &apos;)[[1]][4]&#125; ))#pdata_42872 &lt;- data.frame(Group = pdata_42872)library(hugene10sttranscriptcluster.db)ids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)dim(ids)dim(dat)# &gt; dim(ids)# [1] 19827 2# &gt; dim(dat)# [1] 33297 6#很多探针没有注释信息，进行过滤,/可以用merge但是需要加列dat_filter &lt;- dat[match(ids$probe_id,rownames(dat)),]dim(dat_filter)#用%in%进行筛选dat_filter2 &lt;- dat[rownames(dat) %in% ids$probe_id,]# &gt; dim(dat_filter)# [1] 19827 6#dat_filter is the expression matrix 差异表达分析 需要分组矩阵（design），比较矩阵（contrast） 123456789101112131415161718192021library(limma)##########分组矩阵design，group中的说明。1代表是。用于每张芯片的RNA样本分类design &lt;- model.matrix(~0+factor(group))colnames(design) &lt;- levels(factor(group))rownames(design) &lt;- colnames(dat_filter)design# Control Vemurafenib# GSM1052615 1 0# GSM1052616 1 0# GSM1052617 1 0# GSM1052618 0 1# GSM1052619 0 1# GSM1052620 0 1###############比较矩阵colnames(design) &lt;- levels(factor(group))rownames(design) &lt;- colnames(dat_filter)design#再做一个比较矩阵【一般是case比control】，规定实验组和对照组并定义谁比谁contrast.matrix&lt;-makeContrasts(paste0(unique(group),collapse = &quot;-&quot;),levels = design)#或者下面。注意是Vemurafenib/Controlcontrast.matrix_2 &lt;- makeContrasts(&quot;Vemurafenib-Control&quot; ,levels = design) 筛选差异基因DEGs ###分步进行1，这步用到实验设计矩阵 1fit &lt;- lmFit(dat_filer, design) ###分步进行2，用到比较矩阵 12fit2 &lt;- contrasts.fit(fit, contrast.matrix)fit2 &lt;- eBayes(fit2) ###分步进行3 12tem_output &lt;- topTable(fit2, coef = 1, n= Inf)mydegs &lt;- na.omit(tem_output) ###写成函数 12345678910111213deg&lt;- function(dat_filter,design,contrast)&#123; ##step1 fit &lt;- lmFit(dat_filter,design)#用到实验设计矩阵 ##step2 fit2 &lt;- contrasts.fit(fit, contrast) #用到比较矩阵 fit2 &lt;- eBayes(fit2) ##step3 mtx = topTable(fit2, coef=1, n=Inf) deg_mtx = na.omit(mtx) return(deg_mtx)&#125;deg_mtx &lt;- DEG(dat_filter,design,contrast) #得到全部的差异基因矩阵head(DEG_mtx) 下面和symbole对应 12345library(hugene10sttranscriptcluster.db)ids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)deg_mtx$probe_id &lt;- rownames(deg_mtx)deg_mtx &lt;- merge(ids,deg_mtx, by = &apos;probe_id&apos;)write.csv(deg_mtx, &apos;GSE42872_DEGs_limma.csv&apos;, quote = F)]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
        <tag>生物信息学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggstatsplot包的安装和简单使用]]></title>
    <url>%2F2019%2F04%2F27%2Fggstatsplot%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[ggstatsplot是很优秀的统计作图包,需要3.5及以上R 安装如下 12345devtools::install_github( repo = &quot;IndrajeetPatil/ggstatsplot&quot;, # package path on GitHub dependencies = TRUE, # installs packages which ggstatsplot depends on upgrade_dependencies = TRUE # updates any out of date dependencies) 用某个基因在乳腺癌中突变类型和mRNA表达关系做了一个图，比较漂亮 1234567getwd()a = read.table(&apos;plot.txt&apos;,header = TRUE, sep = &apos;\t&apos;, fill=T)tail(a)colnames(a)=c(&apos;ID&apos;,&apos;Alternations&apos;,&apos;mRNA_expression&apos;,&apos;Mutations&apos;)dat = alibrary(ggstatsplot)ggbetweenstats(data=dat, x=Alternations, y=mRNA_expression)]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>绘图</tag>
        <tag>SCI绘图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R检验数据是否符合正态分布]]></title>
    <url>%2F2019%2F04%2F27%2FR%E6%A3%80%E9%AA%8C%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%2F</url>
    <content type="text"><![CDATA[正态分布又叫高斯分布，很多统计学的理论都是假设所用的数据符合正态分布。所以在研究数据时，首先要看数据是否符合正态分布。 首先，R中很多安装包中有自带的数据集，所以在使用某个数据前先看它是在哪个包中。具体可以参考R各个包里面的数据集列表. 这次主要用MASS包中的crabs数据 1 直方图检验crabs对象是否正态分布 1234library(lattice)library(MASS)histogram(crabs$CW)histogram(~CW|sex, data = crabs,col=&apos;lightblue&apos;) 解释： |是统计学符号，表示“基于…的条件”，这里按螃蟹的性别进行区分处理。 2这条 QQ图进行检测 qqnorm()可以绘制QQ图。通过绘制的图是否呈现一直线判断是否符合正态分布。另外还有一个qqline()函数，在QQ图中绘制一条直线，QQ图中的点越接近这条直线，表示数据越接近正态分布。 12qqnorm(crabs$CW, main =&quot;QQ for Crabs&quot;)qqline(crabs$CW) 3 shapiro.test()函数 上述判断方法相对比较主观，shapiro.test()相对比较客观。只需将检验的数据当作shapiro。test()的函数即可。 12nortest1&lt;-shapiro.test(crabs$CW)nortest1 显示为 123456&gt; nortest1 Shapiro-Wilk normality testdata: crabs$CWW = 0.99106, p-value = 0.2542 p-value反应服从正态分布的概率，值越小越小的概率符合，通常0.05做标准，大于0.05则表示符合正态分布（此处为0.2542），故符合正态分布 接下来分别检验公螃蟹和母螃蟹是否符合正态分布 123456789101112131415161718nortest2 &lt;- with(crabs, tapply(CW, sex,shapiro.test))nortest2#结果如下&gt; nortest2$F Shapiro-Wilk normality testdata: X[[i]]W = 0.98823, p-value = 0.5256$M Shapiro-Wilk normality testdata: X[[i]]W = 0.98327, p-value = 0.2368 可见都符合正态分布。]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
      </tags>
  </entry>
</search>
